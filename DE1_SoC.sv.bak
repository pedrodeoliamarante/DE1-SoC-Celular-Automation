// Top-level module that defines the I/Os for the DE-1 SoC board
module DE1_SoC (HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, KEY, SW, LEDR, GPIO_1, CLOCK_50);
    output logic [6:0]  HEX0, HEX1, HEX2, HEX3, HEX4, HEX5;
	 output logic [9:0]  LEDR;
    input  logic [3:0]  KEY;
    input  logic [9:0]  SW;
    output logic [35:0] GPIO_1;
    input logic CLOCK_50;




	 /* Set up system base clock to 1526 Hz (50 MHz / 2**(14+1))
	    ===========================================================*/
	 logic [31:0] clk;
	 logic SYSTEM_CLOCK;

	 clock_divider divider (.clock(CLOCK_50), .divided_clocks(clk));

	 assign SYSTEM_CLOCK = clk[14]; // 1526 Hz clock signal
   assign GAME_CLOCK = clk[17]; // 1526 Hz clock signal

	 /* If you notice flickering, set SYSTEM_CLOCK faster.
	    However, this may reduce the brightness of the LED board. */


	 /* Set up LED board driver
	    ================================================================== */
	 logic [15:0][15:0]RedPixels; // 16 x 16 array representing red LEDs
    logic [15:0][15:0]GrnPixels; // 16 x 16 array representing green LEDs
	 logic RST;                   // reset - toggle this on startup

	 assign RST = SW[9];

	 /* Standard LED Driver instantiation - set once and 'forget it'.
	    See LEDDriver.sv for more info. Do not modify unless you know what you are doing! */
	 LEDDriver Driver (.CLK(SYSTEM_CLOCK), .RST, .EnableCount(1'b1), .RedPixels, .GrnPixels, .GPIO_1);

   logic  [16:0] [16:0] userInput;
   logic [3:0] counterValue1;
   logic [3:0] counterValue1;
   doubleCounterDisplay counter1(.clk(GAME_CLOCK), .reset(SW[9]), .count(~KEY[4]), .out1(HEX4), out2(HEX3), .counterValue1(counterValue1));
   doubleCounterDisplay counter2(.clk(GAME_CLOCK), .reset(SW[9]), .count(~KEY[3]), .out1(HEX1), out2(HEX0), .counterValue1(counterValue2));

   cellSelector selector(.counterValue1(counterValue1), .counterValue2(counterValue2), .reset(SW[9]), .KEY(~KEY[0]) .userInput(userInput));


	 gameOfLife game(.clk(GAME_CLOCK), .superReset(SW[9]), .gameState(SW[8]), .smallReset(SW[7]), .cellStatus(RedPixels), .userInput(userInput));

endmodule